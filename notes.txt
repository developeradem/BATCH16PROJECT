All trigger context variables studied till date

- Trigger.isBefore
- Trigger.isAfter
- Trigger.isInsert
- Trigger.isUpdate
- Trigger.isDelete
- Trigger.isUndelete

- Trigger.New
    - Newly inserted or updated records
    - datatype of trigger.new?
        - list<sObject> -> sObject will depend on trigger
    - Available in before insert ?
        - Yes. ID is null. CreatedDate, CreatedBy and other system fields are also NULL.
            - why id is null?
                - ID is null because record is NOT YET created.
    - Available in after insert?
        - Yes. Id is present. Record is created.
    - Available in before update and after update?
        - Yes. 
            Field values are same or different?
                - All standard and custom fields values is same for trigger.new in before and after update. BUT some of the system fields might be different, ex: last modified date
- Trigger.Old
    - Datatype of trigger.old?
        - list<sObject>
    - Old snapshot, immediate previous data
    - Available in before insert and after insert?
        - NOT available. It is NULL
        - if record is brand new what is gonna be trigger.old?
            - Null
    - Available in before update and after update?
        - Yes.
        - Same values of trigger.old in before update and after update?
            - Same.
   
- Trigger.NewMap
    - map<id, sObject>
    - newly inserted or updated record.
    - Available in which Events? 
        - after insert. NOT available in before insert. Why? Bcz no id.
        - before update, after update?
            - yes.

- Trigger.OldMap
    - map<id, sobject>.
    - previous version of updated record.
    - Available in which events?
        - Before update,after update, before delete, after delete

//how can we check if we have update ONE particular field?
    //trigger.isUpdate
        // old record field value != new record field value

BEFORE TRIGGER   
    -validation
    -update the recoerd
after trigger
    -dml to insert/update/delete related or unrelated records
    -if we require id while inserting we use after trigger
    -any long running processes   
    -  can we do validation here? we can but dont prefer   




    Async Apex
    - Running behind the scenes.
    - 4 types.
        - future, batch, queueable, schedulable

Future
    - @future -- annotate method with this annotation
    - static. 
    - void only (nothing returns)
    - parameters? 
        - no sObject. No list<sObject>
        - only primitive, or collection of primitive datatype
        how many parameters we can have in future method? (trick)
            - any number
            - ideal is less than 6 (for any method)
    - cannot call future method from future method (directly or indirectly)
        - inserting department
            - department Trigger
                - department handler future method
                    -insert employee
                        - Employee trigger execution
                            - calling another future method

Test Future
    - startTest and StopTest are mandatory.   

    
Interface
    - What? methods in interface does not have any body (just method signature)
    - Method cannot be implemented in interface.
    - Class implements interfaces
        - the implemntor class MUST implement all the methods declared in interface.

Batch apex:
    - Why? why?
        - want to update huge number of records we use batch.
        - not only records, it can be any other limits
            - ex: 10k records to update max. 10 sec CPU time. 6 MB heap size
            - 50k update
                - write a batch. 5k record at once. 10 times batch execution.
            - 1000 records -> it is consuming 3 mins
                - Process 200 records at a time.
    - Database.batchabe is interface
            ex 
                 - 1000 records -> it is consuming 3 mins
                - Process 200 records at a time.
        - start
            - run only when batch starts. we do soql query here.
        - execute
            - 5 times execution. For each 200 records execute will execute.
                - if one of them fails, others can be successful.
                - new gov limits for each execution.
        - finish
            - executes at the end. Only Once.